// Generated by CoffeeScript 1.3.3
(function() {
  var Connection, Helper, async, connectToRedis, _,
    __slice = [].slice;

  _ = require("underscore");

  async = require("async");

  exports.connect = function(options) {
    return new exports.Connection(options || {});
  };

  Connection = (function() {

    function Connection(options) {
      this.helper = new Helper;
      this.redis = options.redis || connectToRedis(options);
      this.namespace = options.namespace || 'flo';
      this.mincomplete = options.mincomplete || 1;
      if (options.database != null) {
        this.redis.select(options.database);
      }
    }

    Connection.prototype.prefixes_for_phrase = function(phrase) {
      var words,
        _this = this;
      words = this.helper.normalize(phrase).split(' ');
      return _.uniq(_.flatten(_.map(words, function(w) {
        var _i, _ref, _ref1, _results;
        return _.map((function() {
          _results = [];
          for (var _i = _ref = _this.mincomplete - 1, _ref1 = w.length - 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; _ref <= _ref1 ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this), function(l) {
          return w.slice(0, l + 1 || 9e9);
        });
      })));
    };

    Connection.prototype.search_term = function() {
      var args, callback, limit, phrase, types,
        _this = this;
      types = arguments[0], phrase = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      if (typeof args[0] === 'number') {
        limit = args[0];
      } else {
        limit = 5;
      }
      callback = args[args.length - 1];
      return async.map(types, function(type, callback) {
        var cachekey, words;
        words = _.uniq(_this.helper.normalize(phrase).split(' ')).sort();
        cachekey = _this.key(type, "cache", words.join('|'));
        return async.waterfall([
          (function(callback) {
            return _this.redis.exists(cachekey, callback);
          }), (function(exists, callback) {
            var interkeys, _ref;
            if (!exists) {
              interkeys = _.map(words, function(w) {
                return _this.key(type, "index", w);
              });
              return (_ref = _this.redis).zinterstore.apply(_ref, [cachekey, interkeys.length].concat(__slice.call(interkeys), [function(err, count) {
                return _this.redis.expire(cachekey, 10 * 60, function() {
                  return callback();
                });
              }]));
            } else {
              return callback();
            }
          }), (function(callback) {
            return _this.redis.zrevrange(cachekey, 0, limit - 1, function(err, ids) {
              var _ref;
              if (ids.length > 0) {
                return (_ref = _this.redis).hmget.apply(_ref, [_this.key(type, "data")].concat(__slice.call(ids), [callback]));
              } else {
                return callback(null, []);
              }
            });
          })
        ], function(err, results) {
          var data;
          data = {};
          data[type] = results;
          return callback(err, data);
        });
      }, function(err, results) {
        results = _.extend.apply(_, results);
        results.term = phrase;
        return callback(err, results);
      });
    };

    Connection.prototype.add_term = function() {
      var args, callback, data, id, score, term, type,
        _this = this;
      type = arguments[0], id = arguments[1], term = arguments[2], score = arguments[3], args = 5 <= arguments.length ? __slice.call(arguments, 4) : [];
      if (typeof args[0] !== 'function') {
        data = args[0];
        callback = args[args.length - 1];
      } else if (typeof args[0] === 'function') {
        callback = args[0];
      }
      return async.parallel([
        (function(callback) {
          return _this.redis.hset(_this.key(type, "data"), id, JSON.stringify({
            id: id,
            term: term,
            score: score,
            data: data || []
          }), function() {
            return callback();
          });
        }), (function(callback) {
          return async.forEach(_this.prefixes_for_phrase(term), (function(w, callback) {
            return _this.redis.zadd(_this.key(type, "index", w), score, id, callback);
          }), callback);
        }), (function(callback) {
          var key;
          key = _this.key(type, _this.helper.normalize(term));
          return _this.redis.get(key, function(err, result) {
            var arr;
            if (err) {
              return callback(err);
            }
            if (result) {
              arr = JSON.parse(result);
              arr.push(id);
              arr = _.uniq(arr);
            } else {
              arr = [id];
            }
            return _this.redis.set(key, JSON.stringify(arr), callback);
          });
        })
      ], function() {
        if (callback != null) {
          return callback();
        }
      });
    };

    Connection.prototype.remove_term = function(type, id, callback) {
      var _this = this;
      return this.redis.hget(this.key(type, "data"), id, function(err, result) {
        var term;
        if (err) {
          return callback(err);
        }
        if (result === null) {
          return callback(new Error("Invalid term id: " + id));
        }
        term = JSON.parse(result).term;
        return async.parallel([
          (function(callback) {
            return _this.redis.hdel(_this.key(type, "data"), id, callback);
          }), (function(callback) {
            return async.forEach(_this.prefixes_for_phrase(term), (function(w, callback) {
              return _this.redis.zrem(_this.key(type, "index", w), id, callback);
            }), callback);
          }), (function(callback) {
            var key;
            key = _this.key(type, _this.helper.normalize(term));
            return _this.redis.get(key, function(err, result) {
              var arr;
              if (err) {
                return callback(err);
              }
              if (result === null) {
                return callback(new Error("Couldn't delete " + id + ". No such entry."));
              }
              arr = JSON.parse(result);
              if (arr.toString() === [id].toString()) {
                return _this.redis.del(key, callback);
              }
              return _this.redis.set(key, JSON.stringify(_.without(arr, id)), callback);
            });
          })
        ], function(err) {
          if (callback != null) {
            return callback(err);
          }
        });
      });
    };

    Connection.prototype.get_ids = function(type, term, callback) {
      return this.redis.get(this.key(type, this.helper.normalize(term)), function(err, result) {
        var arr;
        if (err) {
          return callback(err);
        }
        arr = JSON.parse(result);
        if (arr === null) {
          return callback(null, []);
        }
        return callback(null, arr);
      });
    };

    Connection.prototype.get_data = function(type, id, callback) {
      return this.redis.hget(this.key(type, "data"), id, function(err, result) {
        if (err) {
          return callback(err);
        }
        return callback(null, JSON.parse(result));
      });
    };

    Connection.prototype.redis = function() {
      return this.redis;
    };

    Connection.prototype.end = function() {
      return this.redis.quit();
    };

    Connection.prototype.key = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      args.unshift(this.namespace);
      return args.join(":");
    };

    return Connection;

  })();

  Helper = (function() {

    function Helper() {}

    Helper.latinChars = [["a", /[\u00E0\u00E1\u00E2\u00E3\u00E4\u00E5\u0101\u0103\u0105\u01CE\u01DF\u01E1\u01FB\u0201\u0203\u0227\u0250\u0251\u0252]/g], ["b", /[\u0180\u0183\u0185\u0253\u0299]/g], ["ae", /[\u00E6\u01E3\u01FD]/g], ["c", /[\u00E7\u0107\u0109\u010B\u010D\u0188\u023C\u0255]/g], ["d", /[\u010F\u0111\u018C\u0256\u0257]/g], ["e", /[\u00E8\u00E9\u00EA\u00EB\u0113\u0115\u0117\u0119\u011B\u01DD\u0205\u0207\u0229\u0247\u0258\u0259\u025A\u025B\u025C\u025D\u025E]/g], ["f", /[\u0192]/g], ["g", /[\u011D\u011F\u0121\u0123\u01E5\u01E5\u01F5\u0260\u0261\u0262\u029B]/g], ["h", /[\u0125\u0127\u021F\u0265\u0266\u0267\u029C]/g], ["i", /[\u00EC\u00ED\u00EE\u00EF\u0129\u012B\u012D\u012F\u0131\u01D0\u0209\u020B\u0268\u026A]/g], ["j", /[\u01F0\u0237\u0249\u025F\u0284\u029D]/g], ["k", /[\u0137\u0138\u0199\u01E9\u029E]/g], ["l", /[\u013A\u013C\u013E\u0140\u0142\u019A\u0234\u026B\u026C\u026D\u029F]/g], ["m", /[\u026F\u0270\u0271]/g], ["n", /[\u00F1\u0144\u0146\u0148\u0149\u014B\u019E\u01F9\u0235\u0272\u0273\u0274]/g], ["o", /[\u00F0\u014D\u014F\u0151\u00F2\u00F3\u00F4\u00F5\u00F6\u00F8\u01A1\u01D2\u01EB\u01ED\u01FF\u020D\u020F\u022B\u022D\u022F\u0231\u0254\u0275]/g], ["oe", /[\u0153\u0276]/g], ["p", /[\u01A5]/g], ["q", /[\u024B\u02A0]/g], ["r", /[\u0155\u0157\u0159\u0211\u0213\u024D\u0279\u027A\u027B\u027C\u027D\u027E\u027F\u0280\u0281]/g], ["s", /[\u015B\u015D\u015F\u0161\u0219\u023F\u0282]/g], ["t", /[\u0163\u0165\u0167\u01AB\u01AD\u021B\u0236\u0287\u0288]/g], ["u", /[\u00F9\u00FA\u00FB\u00FC\u0169\u016B\u016D\u016F\u0171\u0173\u01B0\u01D4\u01D6\u01D8\u01DA\u01DC\u0215\u0217\u0289\u028A]/g], ["v", /[\u028B\u028C]/g], ["w", /[\u0175\u028D]/g], ["y", /[\u00FD\u00FF\u0177\u01B4\u0233\u024F\u028E\u028F]/g], ["z", /[\u017A\u017C\u017E\u01B6\u0225\u0240\u0290\u0291]/g]];

    Helper.prototype.normalize = function(term) {
      return this.strip(this.replaceLatin(term).replace(/[^a-z0-9 ]/gi, ''));
    };

    Helper.prototype.gsub = function(source, pattern, replacement) {
      var match, result;
      if (!((pattern != null) && (replacement != null))) {
        return source;
      }
      result = '';
      while (source.length > 0) {
        if ((match = source.match(pattern))) {
          result += source.slice(0, match.index);
          result += replacement;
          source = source.slice(match.index + match[0].length);
        } else {
          result += source;
          source = '';
        }
      }
      return result;
    };

    Helper.prototype.strip = function(source) {
      return source.replace(/^\s+/, '').replace(/\s+$/, '');
    };

    Helper.prototype.replaceLatin = function(term) {
      var translation, _fn, _i, _len;
      term = term.toLowerCase();
      _fn = function(translation) {
        return term = term.replace(translation[1], translation[0]);
      };
      for (_i = 0, _len = latinChars.length; _i < _len; _i++) {
        translation = latinChars[_i];
        _fn(translation);
      }
      return term;
    };

    return Helper;

  })();

  connectToRedis = function(options) {
    var redis;
    redis = require('redis').createClient(options.port, options.host);
    if (options.password != null) {
      redis.auth(options.password);
    }
    return redis;
  };

  exports.Helper = new Helper;

  exports.Connection = Connection;

}).call(this);
